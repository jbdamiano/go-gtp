// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package s1mme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttacherClient is the client API for Attacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttacherClient interface {
	Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*AttachResponse, error)
	Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*DetachResponse, error)
}

type attacherClient struct {
	cc grpc.ClientConnInterface
}

func NewAttacherClient(cc grpc.ClientConnInterface) AttacherClient {
	return &attacherClient{cc}
}

func (c *attacherClient) Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*AttachResponse, error) {
	out := new(AttachResponse)
	err := c.cc.Invoke(ctx, "/s1mme.Attacher/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attacherClient) Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*DetachResponse, error) {
	out := new(DetachResponse)
	err := c.cc.Invoke(ctx, "/s1mme.Attacher/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttacherServer is the server API for Attacher service.
// All implementations should embed UnimplementedAttacherServer
// for forward compatibility
type AttacherServer interface {
	Attach(context.Context, *AttachRequest) (*AttachResponse, error)
	Detach(context.Context, *DetachRequest) (*DetachResponse, error)
}

// UnimplementedAttacherServer should be embedded to have forward compatible implementations.
type UnimplementedAttacherServer struct {
}

func (UnimplementedAttacherServer) Attach(context.Context, *AttachRequest) (*AttachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (UnimplementedAttacherServer) Detach(context.Context, *DetachRequest) (*DetachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}

// UnsafeAttacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttacherServer will
// result in compilation errors.
type UnsafeAttacherServer interface {
	mustEmbedUnimplementedAttacherServer()
}

func RegisterAttacherServer(s grpc.ServiceRegistrar, srv AttacherServer) {
	s.RegisterService(&Attacher_ServiceDesc, srv)
}

func _Attacher_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttacherServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s1mme.Attacher/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttacherServer).Attach(ctx, req.(*AttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attacher_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttacherServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s1mme.Attacher/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttacherServer).Detach(ctx, req.(*DetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Attacher_ServiceDesc is the grpc.ServiceDesc for Attacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s1mme.Attacher",
	HandlerType: (*AttacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _Attacher_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _Attacher_Detach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s1mme/s1mme.proto",
}
